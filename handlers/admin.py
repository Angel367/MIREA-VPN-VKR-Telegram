import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import IDFilter
from keyboards.admin_kb import get_admin_menu
from utils.api import get_all_users, get_all_servers, get_all_keys, revoke_key
from config import ADMIN_IDS

logger = logging.getLogger(__name__)


# Admin states
class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_key_id = State()


async def cmd_admin(message: types.Message):
    """Handle /admin command"""
    if message.from_user.id not in ADMIN_IDS:
        return

    await message.answer(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu()
    )


async def admin_show_users(message: types.Message):
    """Show all users to admin"""
    if message.from_user.id not in ADMIN_IDS:
        return

    users = await get_all_users()

    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    for user in users:
        text += (
            f"ID: {user['id']}\n"
            f"Telegram ID: {user['telegram_id']}\n"
            f"Username: {user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user['is_active'] else '–ù–µ—Ç'}\n\n"
        )

    await message.answer(text)


async def admin_show_servers(message: types.Message):
    """Show all servers to admin"""
    if message.from_user.id not in ADMIN_IDS:
        return

    servers = await get_all_servers()

    if not servers:
        await message.answer("–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = "üñ•Ô∏è –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n"

    for server in servers:
        text += (
            f"ID: {server['id']}\n"
            f"–ò–º—è: {server['server_name']}\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {server['server_location']}\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if server['active'] else '–ù–µ—Ç'}\n\n"
        )

    await message.answer(text)


async def admin_show_keys(message: types.Message):
    """Show all keys to admin"""
    if message.from_user.id not in ADMIN_IDS:
        return

    keys = await get_all_keys()

    if not keys:
        await message.answer("–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = "üîë –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:\n\n"

    for key in keys:
        text += (
            f"ID: {key['id']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {key['user_telegram_id']}\n"
            f"–°–µ—Ä–≤–µ—Ä: {key['server_name']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {key['name']}\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if key['is_active'] else '–ù–µ—Ç'}\n\n"
        )

    await message.answer(text)


async def admin_revoke_key_start(message: types.Message, state: FSMContext):
    """Start revoking a key as admin"""
    if message.from_user.id not in ADMIN_IDS:
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª—é—á–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞:")
    await AdminStates.waiting_for_key_id.set()


async def admin_revoke_key_process(message: types.Message, state: FSMContext):
    """Process key ID input for revocation"""
    try:
        key_id = int(message.text)
        result = await revoke_key(key_id)

        if result:
            await message.answer(f"‚úÖ –ö–ª—é—á —Å ID {key_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –∫–ª—é—á —Å ID {key_id}")

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–ª—é—á–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    except Exception as e:
        logger.error(f"Error revoking key: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –∫–ª—é—á–∞: {str(e)}")

    finally:
        await state.finish()
        await cmd_admin(message)


def register_handlers(dp: Dispatcher):
    """Register admin handlers"""
    # Admin command
    dp.register_message_handler(cmd_admin, IDFilter(user_id=ADMIN_IDS), commands=["admin"])

    # Admin menu handlers
    dp.register_message_handler(admin_show_users, IDFilter(user_id=ADMIN_IDS), lambda m: m.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    dp.register_message_handler(admin_show_servers, IDFilter(user_id=ADMIN_IDS), lambda m: m.text == "üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã")
    dp.register_message_handler(admin_show_keys, IDFilter(user_id=ADMIN_IDS), lambda m: m.text == "üîë –ö–ª—é—á–∏")
    dp.register_message_handler(admin_revoke_key_start, IDFilter(user_id=ADMIN_IDS),
                                lambda m: m.text == "üóëÔ∏è –û—Ç–æ–∑–≤–∞—Ç—å –∫–ª—é—á")

    # Admin state handlers
    dp.register_message_handler(admin_revoke_key_process, IDFilter(user_id=ADMIN_IDS),
                                state=AdminStates.waiting_for_key_id)