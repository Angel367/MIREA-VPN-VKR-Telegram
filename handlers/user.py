import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.user_kb import get_main_menu, get_servers_keyboard, get_vpn_keyboard
from utils.api import get_user_keys, get_available_servers, create_vpn_key
from utils.vpn import generate_vpn_qr_code
from config import DEFAULT_TRAFFIC_LIMIT_GB, DEFAULT_EXPIRATION_DAYS
from handlers.common import cmd_help

logger = logging.getLogger(__name__)


# States for the conversation
class VPNStates(StatesGroup):
    selecting_server = State()
    confirming_key = State()


async def cmd_profile(message: types.Message):
    """Handle /profile command - show user profile"""
    user_id = message.from_user.id

    # Get user's VPN keys
    keys = await get_user_keys(user_id)

    if not keys:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–ª—é—á–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vpn –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
        return

    # Prepare profile message
    profile_text = "üîë –í–∞—à–∏ VPN –∫–ª—é—á–∏:\n\n"

    for key in keys:
        # Format expiration date and traffic info
        expiration = key.get('expiration_date', '–ë–µ—Å—Å—Ä–æ—á–Ω–æ')
        if expiration and expiration != '–ë–µ—Å—Å—Ä–æ—á–Ω–æ':
            expiration = expiration.split('T')[0]  # Format date to YYYY-MM-DD

        traffic_limit = key.get('traffic_limit', 0)
        traffic_used = key.get('traffic_used', 0)

        if traffic_limit > 0:
            traffic_info = f"{traffic_used / (1024 ** 3):.2f} GB / {traffic_limit / (1024 ** 3):.2f} GB"
        else:
            traffic_info = f"{traffic_used / (1024 ** 3):.2f} GB / –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"

        # Add key info to profile text
        profile_text += (
            f"üî∏ {key['name']}\n"
            f"üìç –°–µ—Ä–≤–µ—Ä: {key['server_name']} ({key['server_location']})\n"
            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiration}\n"
            f"üìä –¢—Ä–∞—Ñ–∏–∫: {traffic_info}\n"
            f"üîó –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if key['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        )

    await message.answer(profile_text, reply_markup=get_main_menu())


async def cmd_vpn(message: types.Message):
    """Handle /vpn command - VPN key management"""
    # Get user's VPN keys
    keys = await get_user_keys(message.from_user.id)

    if not keys:
        # User has no keys, offer to create one
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN –∫–ª—é—á–µ–π. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?",
            reply_markup=get_vpn_keyboard(has_keys=False)
        )
    else:
        # User has keys, show management options
        await message.answer(
            f"–£ –≤–∞—Å {len(keys)} VPN –∫–ª—é—á(–µ–π). –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=get_vpn_keyboard(has_keys=True)
        )


async def cmd_servers(message: types.Message):
    """Handle /servers command - show available servers"""
    servers = await get_available_servers()

    if not servers:
        await message.answer("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return

    text = "üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:\n\n"

    for server in servers:
        text += f"üîπ {server['server_name']} - {server['server_location']}\n"

    await message.answer(text, reply_markup=get_main_menu())


async def process_create_vpn(message: types.Message, state: FSMContext):
    """Process the create VPN button click"""
    servers = await get_available_servers()

    if not servers:
        await message.answer("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN –∫–ª—é—á–∞:",
        reply_markup=get_servers_keyboard(servers)
    )

    # Set state to wait for server selection
    await VPNStates.selecting_server.set()

    # Store servers in state data
    await state.update_data(available_servers=servers)


async def process_server_selection(message: types.Message, state: FSMContext):
    """Process server selection"""
    user_data = await state.get_data()
    servers = user_data.get('available_servers', [])

    # Find selected server
    selected_server = None
    for server in servers:
        if server['server_name'] == message.text:
            selected_server = server
            break

    if not selected_server:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=get_servers_keyboard(servers)
        )
        return

    # Store selected server
    await state.update_data(selected_server=selected_server)

    # Ask for confirmation
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä: {selected_server['server_name']} ({selected_server['server_location']})\n\n"
        f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω VPN –∫–ª—é—á —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        f"- –¢—Ä–∞—Ñ–∏–∫: {DEFAULT_TRAFFIC_LIMIT_GB} GB\n"
        f"- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {DEFAULT_EXPIRATION_DAYS} –¥–Ω–µ–π\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞?",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )

    # Set state to wait for confirmation
    await VPNStates.confirming_key.set()


async def process_key_confirmation(message: types.Message, state: FSMContext):
    """Process key creation confirmation"""
    if message.text != "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        await state.finish()
        return

    user_data = await state.get_data()
    selected_server = user_data.get('selected_server')

    if not selected_server:
        await message.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", reply_markup=get_main_menu())
        await state.finish()
        return

    # Show "processing" message
    processing_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞–µ–º VPN –∫–ª—é—á...")

    try:
        # Create VPN key
        key_data = await create_vpn_key(
            user_id=message.from_user.id,
            server_id=selected_server['id'],
            name=f"TG_{message.from_user.id}_{selected_server['server_name']}",
            traffic_limit_gb=DEFAULT_TRAFFIC_LIMIT_GB,
            expiration_days=DEFAULT_EXPIRATION_DAYS
        )

        # Generate QR code
        qr_image = generate_vpn_qr_code(key_data['access_url'])

        from aiogram.utils.markdown import escape_md

        # access_url = escape_md(key_data['access_url'])

        caption = (
            f"‚úÖ <b>VPN –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìç <b>–°–µ—Ä–≤–µ—Ä:</b> {selected_server['server_name']} ({selected_server['server_location']})\n"
            f"üìÖ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {DEFAULT_EXPIRATION_DAYS} –¥–Ω–µ–π\n"
            f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b> {DEFAULT_TRAFFIC_LIMIT_GB} GB\n\n"
            f"üîë <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
            f"–°—Å—ã–ª–∫–∞ <b>–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:</b> <code>{key_data['access_url']}</code>\n\n"
            f"–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN-–∫–ª–∏–µ–Ω—Ç–∞."
        )
        await message.answer_photo(
            qr_image,
            caption=caption,
            parse_mode=types.ParseMode.HTML,
            reply_markup=get_main_menu()
        )

        # Delete processing message
        await processing_msg.delete()

    except Exception as e:
        logger.error(f"Error creating VPN key: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

    # End the conversation
    await state.finish()


async def process_show_keys(message: types.Message):
    """Process show VPN keys button click"""
    # Get user's VPN keys
    keys = await get_user_keys(message.from_user.id)

    if not keys:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN –∫–ª—é—á–µ–π. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?",
            reply_markup=get_vpn_keyboard(has_keys=False)
        )
        return

    # Send each key as a separate message with QR code
    for key in keys:
        if not key['is_active']:
            continue

        # Generate QR code
        qr_image = generate_vpn_qr_code(key['access_url'])

        # Format expiration date and traffic info
        expiration = key.get('expiration_date', '–ë–µ—Å—Å—Ä–æ—á–Ω–æ')
        if expiration and expiration != '–ë–µ—Å—Å—Ä–æ—á–Ω–æ':
            expiration = expiration.split('T')[0]  # Format date to YYYY-MM-DD

        traffic_limit = key.get('traffic_limit', 0)
        traffic_used = key.get('traffic_used', 0)

        if traffic_limit > 0:
            traffic_info = f"{traffic_used / (1024 ** 3):.2f} GB / {traffic_limit / (1024 ** 3):.2f} GB"
        else:
            traffic_info = f"{traffic_used / (1024 ** 3):.2f} GB / –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"

        # Send key info with QR code
        await message.answer_photo(
            qr_image,
            caption=(
                f"üîë VPN –∫–ª—é—á: {key['name']}\n"
                f"üìç –°–µ—Ä–≤–µ—Ä: {key['server_name']} ({key['server_location']})\n"
                f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiration}\n"
                f"üìä –¢—Ä–∞—Ñ–∏–∫: {traffic_info}\n\n"
                f"üîó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"
                f"`{key['access_url']}`"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_vpn_keyboard(has_keys=True)
    )


async def process_back_to_menu(message: types.Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu()
    )


def register_handlers(dp: Dispatcher):
    """Register user handlers"""
    # Commands
    dp.register_message_handler(cmd_profile, commands=["profile"])
    dp.register_message_handler(cmd_vpn, commands=["vpn"])
    dp.register_message_handler(cmd_servers, commands=["servers"])

    # Button clicks
    dp.register_message_handler(process_create_vpn, lambda m: m.text == "–ü–æ–ª—É—á–∏—Ç—å VPN")
    dp.register_message_handler(process_show_keys, lambda m: m.text == "–ú–æ–∏ VPN –∫–ª—é—á–∏")
    dp.register_message_handler(process_back_to_menu, lambda m: m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    dp.register_message_handler(cmd_help, lambda m: m.text == "–ü–æ–º–æ—â—å")


    # State handlers
    dp.register_message_handler(process_server_selection, state=VPNStates.selecting_server)
    dp.register_message_handler(process_key_confirmation, state=VPNStates.confirming_key)